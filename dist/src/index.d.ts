import { EditorView } from '@codemirror/view';
import { OptionsType, PublicResourcesType, FileType, DefaultConfigType, EventsType } from './type';
import './theme.less';
import './style.less';
declare type CurrFileType = Required<FileType> & {
    name: string;
    value: string;
    renderTemplate: (s: string) => string;
};
export default class MiniSandbox {
    static version: string;
    static encode: (value: string) => string;
    static decode: (value: string) => string;
    readonly version: string;
    el: HTMLDivElement;
    files: Required<FileType>[];
    publicResources: Required<PublicResourcesType>;
    defaultConfig: Required<DefaultConfigType>;
    events: Required<EventsType>;
    editor: EditorView;
    fileIndex: number;
    currFile: CurrFileType;
    loading: boolean;
    isClick: boolean;
    iframe: HTMLIFrameElement;
    maskEl: HTMLDivElement;
    loadEl: HTMLDivElement;
    codeEl: HTMLDivElement;
    editorEl: HTMLDivElement;
    lineEl: HTMLDivElement;
    contentEl: HTMLDivElement;
    searchEl: HTMLInputElement;
    ldqPublicResources: string[];
    run: Function;
    constructor(options?: OptionsType);
    initOptions(options: OptionsType): void;
    init(): Promise<void>;
    reset(): void;
    private initDom;
    private initMenu;
    private initEvent;
    private handleChange;
    private initCodeMirror;
    private changeTab;
    setValue(value: string): void;
    getValue(): string;
    setCode(code: string): void;
    getCode(value?: string): string;
    setStyle(el: HTMLDivElement, styles: {
        [key: string]: string | number;
    }): void;
    private addClass;
    render(): void;
    private getPublicResources;
    private triggleLoading;
    private renderIframe;
    triggleTheme(theme?: "light" | "dark"): void;
}
export {};
